/* Delete Records */
DELETE FROM silver_bec_ods.MTL_PHYSICAL_INVENTORY_TAGS
WHERE
  (
    COALESCE(TAG_ID, 0)
  ) IN (
    SELECT
      COALESCE(stg.TAG_ID, 0) AS TAG_ID
    FROM silver_bec_ods.MTL_PHYSICAL_INVENTORY_TAGS AS ods, bronze_bec_ods_stg.MTL_PHYSICAL_INVENTORY_TAGS AS stg
    WHERE
      COALESCE(ods.TAG_ID, 0) = COALESCE(stg.TAG_ID, 0)
      AND stg.kca_operation IN ('INSERT', 'UPDATE')
  );
/* Insert records */
INSERT INTO silver_bec_ods.MTL_PHYSICAL_INVENTORY_TAGS (
  TAG_ID,
  PHYSICAL_INVENTORY_ID,
  ORGANIZATION_ID,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY,
  LAST_UPDATE_LOGIN,
  VOID_FLAG,
  TAG_NUMBER,
  ADJUSTMENT_ID,
  INVENTORY_ITEM_ID,
  TAG_QUANTITY,
  TAG_UOM,
  TAG_QUANTITY_AT_STANDARD_UOM,
  STANDARD_UOM,
  SUBINVENTORY,
  LOCATOR_ID,
  LOT_NUMBER,
  LOT_EXPIRATION_DATE,
  REVISION,
  SERIAL_NUM,
  COUNTED_BY_EMPLOYEE_ID,
  LOT_SERIAL_CONTROLS,
  ATTRIBUTE_CATEGORY,
  ATTRIBUTE1,
  ATTRIBUTE2,
  ATTRIBUTE3,
  ATTRIBUTE4,
  ATTRIBUTE5,
  ATTRIBUTE6,
  ATTRIBUTE7,
  ATTRIBUTE8,
  ATTRIBUTE9,
  ATTRIBUTE10,
  ATTRIBUTE11,
  ATTRIBUTE12,
  ATTRIBUTE13,
  ATTRIBUTE14,
  ATTRIBUTE15,
  REQUEST_ID,
  PROGRAM_APPLICATION_ID,
  PROGRAM_ID,
  PROGRAM_UPDATE_DATE,
  PARENT_LPN_ID,
  OUTERMOST_LPN_ID,
  COST_GROUP_ID,
  TAG_SECONDARY_QUANTITY,
  TAG_SECONDARY_UOM,
  TAG_QTY_AT_STD_SECONDARY_UOM,
  STANDARD_SECONDARY_UOM,
  KCA_OPERATION,
  IS_DELETED_FLG,
  kca_seq_ID,
  kca_seq_date
)
(
  SELECT
    TAG_ID,
    PHYSICAL_INVENTORY_ID,
    ORGANIZATION_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    VOID_FLAG,
    TAG_NUMBER,
    ADJUSTMENT_ID,
    INVENTORY_ITEM_ID,
    TAG_QUANTITY,
    TAG_UOM,
    TAG_QUANTITY_AT_STANDARD_UOM,
    STANDARD_UOM,
    SUBINVENTORY,
    LOCATOR_ID,
    LOT_NUMBER,
    LOT_EXPIRATION_DATE,
    REVISION,
    SERIAL_NUM,
    COUNTED_BY_EMPLOYEE_ID,
    LOT_SERIAL_CONTROLS,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    REQUEST_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    PARENT_LPN_ID,
    OUTERMOST_LPN_ID,
    COST_GROUP_ID,
    TAG_SECONDARY_QUANTITY,
    TAG_SECONDARY_UOM,
    TAG_QTY_AT_STD_SECONDARY_UOM,
    STANDARD_SECONDARY_UOM,
    KCA_OPERATION,
    'N' AS IS_DELETED_FLG,
    CAST(NULLIF(KCA_SEQ_ID, '') AS DECIMAL(36, 0)) AS KCA_SEQ_ID,
    kca_seq_date
  FROM bronze_bec_ods_stg.MTL_PHYSICAL_INVENTORY_TAGS
  WHERE
    kca_operation IN ('INSERT', 'UPDATE')
    AND (COALESCE(TAG_ID, 0), kca_seq_ID) IN (
      SELECT
        COALESCE(TAG_ID, 0) AS TAG_ID,
        MAX(kca_seq_ID)
      FROM bronze_bec_ods_stg.MTL_PHYSICAL_INVENTORY_TAGS
      WHERE
        kca_operation IN ('INSERT', 'UPDATE')
      GROUP BY
        COALESCE(TAG_ID, 0)
    )
);
/* Soft delete */
UPDATE silver_bec_ods.MTL_PHYSICAL_INVENTORY_TAGS SET IS_DELETED_FLG = 'N';
UPDATE silver_bec_ods.MTL_PHYSICAL_INVENTORY_TAGS SET IS_DELETED_FLG = 'Y'
WHERE
  (
    TAG_ID
  ) IN (
    SELECT
      TAG_ID
    FROM bec_raw_dl_ext.MTL_PHYSICAL_INVENTORY_TAGS
    WHERE
      (TAG_ID, KCA_SEQ_ID) IN (
        SELECT
          TAG_ID,
          MAX(KCA_SEQ_ID) AS KCA_SEQ_ID
        FROM bec_raw_dl_ext.MTL_PHYSICAL_INVENTORY_TAGS
        GROUP BY
          TAG_ID
      )
      AND kca_operation = 'DELETE'
  );
UPDATE bec_etl_ctrl.batch_ods_info SET last_refresh_date = CURRENT_TIMESTAMP()
WHERE
  ods_table_name = 'mtl_physical_inventory_tags';