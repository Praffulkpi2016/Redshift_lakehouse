/* delete records */
DELETE FROM silver_bec_ods.MTL_TRANSACTION_ACCOUNTS
WHERE
  (COALESCE(TRANSACTION_ID, 0), COALESCE(REFERENCE_ACCOUNT, 0), COALESCE(COST_ELEMENT_ID, 0), COALESCE(PRIMARY_QUANTITY, 0), COALESCE(RESOURCE_ID, 0), COALESCE(ACCOUNTING_LINE_TYPE, 0), COALESCE(BASE_TRANSACTION_VALUE, 0)) IN (
    SELECT
      COALESCE(stg.TRANSACTION_ID, 0) AS TRANSACTION_ID,
      COALESCE(stg.REFERENCE_ACCOUNT, 0) AS REFERENCE_ACCOUNT,
      COALESCE(stg.COST_ELEMENT_ID, 0) AS COST_ELEMENT_ID,
      COALESCE(stg.PRIMARY_QUANTITY, 0) AS PRIMARY_QUANTITY,
      COALESCE(stg.RESOURCE_ID, 0) AS RESOURCE_ID,
      COALESCE(stg.ACCOUNTING_LINE_TYPE, 0) AS ACCOUNTING_LINE_TYPE,
      COALESCE(stg.BASE_TRANSACTION_VALUE, 0) AS BASE_TRANSACTION_VALUE
    FROM bronze_bec_ods_stg.MTL_TRANSACTION_ACCOUNTS AS stg
    WHERE
      stg.kca_operation <> 'DELETE'
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.TRANSACTION_ID, 0) = COALESCE(stg.TRANSACTION_ID, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.REFERENCE_ACCOUNT, 0) = COALESCE(stg.REFERENCE_ACCOUNT, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.COST_ELEMENT_ID, 0) = COALESCE(stg.COST_ELEMENT_ID, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.PRIMARY_QUANTITY, 0) = COALESCE(stg.PRIMARY_QUANTITY, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.RESOURCE_ID, 0) = COALESCE(stg.RESOURCE_ID, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.ACCOUNTING_LINE_TYPE, 0) = COALESCE(stg.ACCOUNTING_LINE_TYPE, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.BASE_TRANSACTION_VALUE, 0) = COALESCE(stg.BASE_TRANSACTION_VALUE, 0)
  );
/* Insert records */
INSERT INTO silver_bec_ods.MTL_TRANSACTION_ACCOUNTS (
  TRANSACTION_ID,
  REFERENCE_ACCOUNT,
  LAST_UPDATE_DATE,
  LAST_UPDATED_BY,
  CREATION_DATE,
  CREATED_BY,
  LAST_UPDATE_LOGIN,
  INVENTORY_ITEM_ID,
  ORGANIZATION_ID,
  TRANSACTION_DATE,
  TRANSACTION_SOURCE_ID,
  TRANSACTION_SOURCE_TYPE_ID,
  TRANSACTION_VALUE,
  PRIMARY_QUANTITY,
  GL_BATCH_ID,
  ACCOUNTING_LINE_TYPE,
  BASE_TRANSACTION_VALUE,
  CONTRA_SET_ID,
  RATE_OR_AMOUNT,
  BASIS_TYPE,
  RESOURCE_ID,
  COST_ELEMENT_ID,
  ACTIVITY_ID,
  CURRENCY_CODE,
  CURRENCY_CONVERSION_DATE,
  CURRENCY_CONVERSION_TYPE,
  CURRENCY_CONVERSION_RATE,
  REQUEST_ID,
  PROGRAM_APPLICATION_ID,
  PROGRAM_ID,
  PROGRAM_UPDATE_DATE,
  ENCUMBRANCE_TYPE_ID,
  REPETITIVE_SCHEDULE_ID,
  GL_SL_LINK_ID,
  USSGL_TRANSACTION_CODE,
  INV_SUB_LEDGER_ID,
  KCA_OPERATION,
  IS_DELETED_FLG,
  kca_seq_id,
  VALID_RECORDS_FLG
)
(
  SELECT
    TRANSACTION_ID,
    REFERENCE_ACCOUNT,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    TRANSACTION_DATE,
    TRANSACTION_SOURCE_ID,
    TRANSACTION_SOURCE_TYPE_ID,
    TRANSACTION_VALUE,
    PRIMARY_QUANTITY,
    GL_BATCH_ID,
    ACCOUNTING_LINE_TYPE,
    BASE_TRANSACTION_VALUE,
    CONTRA_SET_ID,
    RATE_OR_AMOUNT,
    BASIS_TYPE,
    RESOURCE_ID,
    COST_ELEMENT_ID,
    ACTIVITY_ID,
    CURRENCY_CODE,
    CURRENCY_CONVERSION_DATE,
    CURRENCY_CONVERSION_TYPE,
    CURRENCY_CONVERSION_RATE,
    REQUEST_ID,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    PROGRAM_UPDATE_DATE,
    ENCUMBRANCE_TYPE_ID,
    REPETITIVE_SCHEDULE_ID,
    GL_SL_LINK_ID,
    USSGL_TRANSACTION_CODE,
    INV_SUB_LEDGER_ID,
    KCA_OPERATION,
    'N' AS IS_DELETED_FLG,
    CAST(NULLIF(KCA_SEQ_ID, '') AS DECIMAL(36, 0)) AS KCA_SEQ_ID,
    'N' AS VALID_RECORDS_FLG
  FROM bronze_bec_ods_stg.MTL_TRANSACTION_ACCOUNTS
  WHERE
    kca_operation IN ('INSERT', 'UPDATE')
    AND (COALESCE(TRANSACTION_ID, 0), COALESCE(REFERENCE_ACCOUNT, 0), COALESCE(COST_ELEMENT_ID, 0), COALESCE(PRIMARY_QUANTITY, 0), COALESCE(RESOURCE_ID, 0), COALESCE(ACCOUNTING_LINE_TYPE, 0), COALESCE(BASE_TRANSACTION_VALUE, 0), kca_seq_id) IN (
      SELECT
        COALESCE(TRANSACTION_ID, 0) AS TRANSACTION_ID,
        COALESCE(REFERENCE_ACCOUNT, 0) AS REFERENCE_ACCOUNT,
        COALESCE(COST_ELEMENT_ID, 0) AS COST_ELEMENT_ID,
        COALESCE(PRIMARY_QUANTITY, 0) AS PRIMARY_QUANTITY,
        COALESCE(RESOURCE_ID, 0) AS RESOURCE_ID,
        COALESCE(ACCOUNTING_LINE_TYPE, 0) AS ACCOUNTING_LINE_TYPE,
        COALESCE(BASE_TRANSACTION_VALUE, 0) AS BASE_TRANSACTION_VALUE,
        MAX(kca_seq_id)
      FROM bronze_bec_ods_stg.MTL_TRANSACTION_ACCOUNTS
      WHERE
        kca_operation IN ('INSERT', 'UPDATE')
      GROUP BY
        COALESCE(TRANSACTION_ID, 0),
        COALESCE(REFERENCE_ACCOUNT, 0),
        COALESCE(COST_ELEMENT_ID, 0),
        COALESCE(PRIMARY_QUANTITY, 0),
        COALESCE(RESOURCE_ID, 0),
        COALESCE(ACCOUNTING_LINE_TYPE, 0),
        COALESCE(BASE_TRANSACTION_VALUE, 0)
    )
);
/* Soft delete */
UPDATE silver_bec_ods.MTL_TRANSACTION_ACCOUNTS SET IS_DELETED_FLG = 'Y'
WHERE
  (COALESCE(TRANSACTION_ID, 0), COALESCE(REFERENCE_ACCOUNT, 0), COALESCE(COST_ELEMENT_ID, 0), COALESCE(PRIMARY_QUANTITY, 0), COALESCE(RESOURCE_ID, 0), COALESCE(ACCOUNTING_LINE_TYPE, 0), COALESCE(BASE_TRANSACTION_VALUE, 0)) IN (
    SELECT
      COALESCE(stg.TRANSACTION_ID, 0) AS TRANSACTION_ID,
      COALESCE(stg.REFERENCE_ACCOUNT, 0) AS REFERENCE_ACCOUNT,
      COALESCE(stg.COST_ELEMENT_ID, 0) AS COST_ELEMENT_ID,
      COALESCE(stg.PRIMARY_QUANTITY, 0) AS PRIMARY_QUANTITY,
      COALESCE(stg.RESOURCE_ID, 0) AS RESOURCE_ID,
      COALESCE(stg.ACCOUNTING_LINE_TYPE, 0) AS ACCOUNTING_LINE_TYPE,
      COALESCE(stg.BASE_TRANSACTION_VALUE, 0) AS BASE_TRANSACTION_VALUE
    FROM bec_raw_dl_ext.MTL_TRANSACTION_ACCOUNTS AS stg
    WHERE
      stg.kca_operation = 'DELETE'
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.TRANSACTION_ID, 0) = COALESCE(stg.TRANSACTION_ID, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.REFERENCE_ACCOUNT, 0) = COALESCE(stg.REFERENCE_ACCOUNT, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.COST_ELEMENT_ID, 0) = COALESCE(stg.COST_ELEMENT_ID, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.PRIMARY_QUANTITY, 0) = COALESCE(stg.PRIMARY_QUANTITY, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.RESOURCE_ID, 0) = COALESCE(stg.RESOURCE_ID, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.ACCOUNTING_LINE_TYPE, 0) = COALESCE(stg.ACCOUNTING_LINE_TYPE, 0)
      AND COALESCE(MTL_TRANSACTION_ACCOUNTS.BASE_TRANSACTION_VALUE, 0) = COALESCE(stg.BASE_TRANSACTION_VALUE, 0)
  );
UPDATE bec_etl_ctrl.batch_ods_info SET last_refresh_date = CURRENT_TIMESTAMP()
WHERE
  ods_table_name = 'mtl_transaction_accounts';